Julia Sensei: Julia Kozak, Rin Fukuoka
APCS pd08
L07: But These Go Up To Eleven
2022-03-21
time spent: 3.0hrs

DISCO:
- Abstract classes can use both defined methods (that can be overwritten)
  and abstract methods that are defined by child classes.
- .gitignore can remove class files from your clone.

QCC:
- What is causing lag in the graphics runner/ is there any way to prevent it?


Questions/Answers

Activity 2
1.  A card is an object that doesn't change once it is initialized,
    and it can be compared to other cards. A deck holds numerous cards
    and can perform operations with the set of cards it has, such as
    shuffling or dealing.
2.  It'll have ranks.length * suits.length = 6 cards.
3.  ranks will look like {"Two", "Three", ... , "Ten", "Jack", "Queen", "King", "Ace"}
    suits will look like {"Clubs", "Diamonds", "Hearts", "Spades"}
    values will look like {2, 3, ..., 10, 10, 10, 10, 11}
4.  suits won't matter, but ranks and values will depend on each other
    because the order of values must correspond to the order of ranks.

Activity 3
1.  public static String flip() {
        double ht = Math.random();
        if (ht > 2.0/3) {
            return "tails";
        } else {
            return "heads";
        }
    }
2.  public static boolean arePermutations(int[] one, int[] two) {
        for (int i=0; i<one.length; i++) {
            int thingCtr = 0;
            for (int j=0; j<one.length; j++) {
                if (one[i] == two[j]) {
                    thingCtr++;
                }
            }
            if (thingCtr == 0) { return false; }
        }
        return true;
    }
3.  The sequence would be 3, 2, 2, 3.

Activity 5:
Buggy1: isEmpty()
        There is something wrong with the isEmpty method, because the
        program got past the size == 0 test, but not the isEmpty() test,
        so isEmpty() must not be returning if size == 0.
Buggy2: (constructor) Deck(ranks, suits, values)
        It's possible that the constructor doesn't set the size of the deck,
        because size remains 0 even in a one card deck.
Buggy3: shuffle()
        The code doesn't swap cards (swapping functionality is written
        incorrectly), since all cards remain in the same place.
Buggy4: isEmpty()
        The deal() method will return null if the deck is empty, so it is 
        possible that isEmpty() is incorrect and size() is not being updated
        properly.
Buggy5: shuffle()
        There is an IndexOutOfBoundsException at the Deck.shuffle() method,
        so it's likely that the index for shuffle is going to -1 instead of 
        0 and causing errors.

Activity 6:
1.  The player can take the first 5 of spades and the 6, or take the
    second 5 of clubs and the 6.
2.  They must be, because if all triples of J, Q, K were already taken,
    that would imply that there were an even number of cards left, which
    isn't true.
3.  There is no favorable move, because if we ignore suits, each card has
    exactly one move that can be made with it (in terms of what other cards
    are used), so once you complete all of your valid moves, you'll end up
    in the same board position as if you had done them in a different order.

Activity 7:
1.  You would need a deck of cards, and point values corresponding to the
    cards.
2.  You would need to be able to select cards to group (by stating the
    index of each of the cards you want to select), which would consist
    of a method retrieving the cards at certain indices, checking if it
    is a pair and if so if the point values sum to 11, otherwise checking
    if it is a triple and if so if the triple is J, Q, K. If either are
    true, it will remove those cards and replace them with newly dealt cards.
3.  Yes, it can deal, replace, check if a move is valid, and check if
    there are possible moves.
4.
    a.  It is called in the constructor and in the creation of a new game.
    b.  anotherPlayIsPossible() should use those to check if the current
        board arrangement has a potential move, and isLegal() should do the
        same.
    c.  It creates an empty list, then runs through each element, checking
        if it is null. If not, it will add it to the list and return the list
        at the end. The final list will have original elements 0, 1, 3, 6, 7
        in it in that order.
    d.  for (int i : cIndexes) {
            System.out.println(cards[i]);
        }
    e.  Most likely anotherPlayIsPossible(), because it must check from the
        whole list of cards and will have to filter out the ones that are null.

Activity 8:
1.  They will all have the same card decks, deals/replacements, and methods
    to check if the game was won. They may have different initial hand sizes
    though. They also differ in their isLegal() and anotherPlayIsPossible()
    methods, which will check for conditions different from there being a
    pair sum 11 or a triple of JQK.
2.  The class has static final variables that represent each of the orders of
    ranks, suits, point values, and board size, and the constructor initializes
    a deck with the first three of those parameters, and the array of cards is
    assigned the length of the last parameter.
3.  isLegal() and anotherPlayIsPossible() are abstract methods. They do cover
    all differences between the card games, because they can be used to define
    the set of rules of any of the games, and the constructor can specify size,
    ranks/suits/point values.

Activity 9:
1.  Size isn't an abstract method because it is still a variable that exists and
    is specific to every board, and the method is simply returning the value
    for that class.
2.  This is because the replacement methods don't depend on any new function
    specific to a class and all essentially do the same thing, which is replace
    those selected cards.
3.  It would be able to call isLegal() and anotherPlayIsPossible() polymorphically
    like it has been doing, except it wouldn't inherit the already defined functions
    of each of the other methods. This implementation could work, except each
    class of the parent class will have to redefine every method on its own.
